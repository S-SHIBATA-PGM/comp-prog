000001 IDENTIFICATION DIVISION.
000002 PROGRAM-ID. ABC_226_B.
000003 
000004 ENVIRONMENT DIVISION.
000005 INPUT-OUTPUT SECTION.
000006 FILE-CONTROL.
000007 SELECT SYSIN_B ASSIGN TO KEYBOARD ORGANIZATION LINE SEQUENTIAL.
000008 SELECT SYSIN_S ASSIGN TO KEYBOARD ORGANIZATION LINE SEQUENTIAL.
000009 
000010 DATA DIVISION.
000011 FILE SECTION.
000012 FD SYSIN_B.
000013 01 INDATA_B   PIC X(2200007).
000014 FD SYSIN_S.
000015 01 INDATA_S   PIC X(2207).
000016 
000017 WORKING-STORAGE SECTION.
000018 01 L          PIC 9(6).
000019 01 N          PIC 9(10).
000020 01 a1.
000021    03 a       BINARY-DOUBLE VALUE 9223372036854775807
000022               OCCURS 200000.
000023 01 accm       BINARY-DOUBLE.
000024 01 bd_max     BINARY-DOUBLE VALUE 9223372036854775807.
000025 01 cur        BINARY-DOUBLE.
000026 01 i          PIC 9(10) COMP.
000027 01 idx        PIC 9(10) VALUE 1.
000028 01 idxa       PIC 9(10) VALUE 1.
000029 01 idxrb      PIC 9(10) VALUE 1.
000030 01 j          PIC 9(10) COMP.
000031 01 num        PIC 9(10) VALUE ZERO COMP.
000032 01 pre        BINARY-DOUBLE.
000033 01 prei       PIC 9(10).
000034 01 pt         PIC S9(10).
000035 01 ra1.
000036    03 ra      OCCURS 300000.
000037       05 ida  BINARY-DOUBLE.
000038       05 vala BINARY-DOUBLE.
000039 01 rb1.
000040    03 rb      OCCURS 200000.
000041       05 idb  BINARY-DOUBLE.
000042       05 valb BINARY-DOUBLE.
000043 01 tbl1.
000044    03 tbl     OCCURS 200001.
000045       05 tbli BINARY-DOUBLE VALUE ZERO.
000046       05 idn  BINARY-DOUBLE VALUE 200001.
000047       05 tblj BINARY-DOUBLE VALUE ZERO.
000048       05 ky   BINARY-DOUBLE VALUE 1000000001.
000049       05 vl   BINARY-DOUBLE.
000050 01 zs         PIC Z(9)9.
000051 
000052 PROCEDURE DIVISION.
000053   ACCEPT N.
000054   IF 1000 <= N
000055     OPEN INPUT SYSIN_S
000056   ELSE
000057     OPEN INPUT SYSIN_B
000058   END-IF.
000059   PERFORM VARYING i FROM 1 BY 1 UNTIL N < i
000060     IF 1000 <= N
000061       READ SYSIN_S
000062     ELSE
000063       READ SYSIN_B
000064     END-IF
000065     MOVE 1 TO pt
000066     IF 1000 <= N
000067       UNSTRING INDATA_S DELIMITED SPACE INTO L POINTER pt
000068     ELSE
000069       UNSTRING INDATA_B DELIMITED SPACE INTO L POINTER pt
000070     END-IF
000071     MOVE ZERO TO accm
000072     PERFORM VARYING j FROM 1 BY 1 UNTIL L < j
000073       IF 1000 <= N
000074         UNSTRING INDATA_S DELIMITED SPACE INTO cur POINTER pt
000075       ELSE
000076         UNSTRING INDATA_B DELIMITED SPACE INTO cur POINTER pt
000077       END-IF
000078       MOVE i TO tbli(idx)
000079       MOVE idx TO idn(idx)
000080       MOVE j TO tblj(idx)
000081       MOVE cur TO ky(idx)
000082       ADD 1 TO idx
000083     END-PERFORM
000084   END-PERFORM.
000085   IF 1000 <= N
000086     CLOSE SYSIN_S
000087   ELSE
000088     CLOSE SYSIN_B
000089   END-IF.
000090   SORT tbl ASCENDING ky
000091            ASCENDING idn.
000092   PERFORM VARYING i FROM 1 BY 1 UNTIL 300000 < i
000093     MOVE i TO ida(i)
000094       COMPUTE vala(i) = FUNCTION RANDOM * 10000000000
000095       + FUNCTION RANDOM / 14159265358
000096       + FUNCTION RANDOM * 14159265358
000097   END-PERFORM.
000098   SORT ra ASCENDING vala.
000099   MOVE bd_max TO pre.
000100   PERFORM VARYING i FROM 1 BY 1
000101   UNTIL 200000 < idxrb OR 300000 < i
000102     IF pre NOT = vala(i)
000103       MOVE ida(i) TO idb(idxrb)
000104       MOVE vala(i) TO valb(idxrb)
000105       ADD 1 TO idxrb
000106     END-IF
000107     MOVE vala(i) TO pre
000108   END-PERFORM.
000109   SORT rb ASCENDING idb.
000110   MOVE 1 TO idxrb.
000111   MOVE 1000000001 TO pre.
000112   PERFORM VARYING i FROM 1 BY 1 UNTIL idx - 1 < i
000113     IF pre NOT = ky(i)
000114       COMPUTE cur = valb(idxrb)
000115       ADD 1 TO idxrb
000116     END-IF
000117     MOVE cur TO vl(i)
000118     MOVE ky(i) TO pre
000119   END-PERFORM.
000120   SORT tbl ASCENDING idn.
000121   MOVE tbli(1) TO prei.
000122   MOVE ZERO TO accm.
000123   PERFORM VARYING i FROM 1 BY 1 UNTIL idx < i
000124     IF prei NOT = tbli(i)
000125       MOVE accm TO a(idxa)
000126       ADD 1 TO idxa
000127       MOVE ZERO TO accm
000128     END-IF
000129     MULTIPLY tblj(i) BY vl(i) GIVING cur
000130     CALL "CBL_XOR" USING cur, accm, BY VALUE 4
000131     MOVE tbli(i) TO prei
000132   END-PERFORM.
000133   SORT a ASCENDING a.
000134   MOVE bd_max TO pre.
000135   PERFORM VARYING i FROM 1 BY 1 UNTIL N < i
000136     IF pre NOT = a(i)
000137       ADD 1 TO num
000138       MOVE a(i) TO pre
000139   END-PERFORM.
000140   MOVE num TO zs.
000141   DISPLAY FUNCTION TRIM(zs).
000142   STOP RUN.

